
i2cscanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002710  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800281c  0800281c  0000381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b4  080028b4  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080028b4  080028b4  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080028b4  080028b4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028b4  080028b4  000038b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080028bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  08002918  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08002918  00004264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000904a  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d9  00000000  00000000  0000d0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0000e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ef  00000000  00000000  0000ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001708f  00000000  00000000  0000f66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b38f  00000000  00000000  000266fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846be  00000000  00000000  00031a8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b614b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002980  00000000  00000000  000b6190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b8b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002804 	.word	0x08002804

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002804 	.word	0x08002804

0800014c <i2cScanner>:
  * @retval int
  */


void i2cScanner(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b08e      	sub	sp, #56	@ 0x38
 8000150:	af00      	add	r7, sp, #0

	char addr[14];
	uint8_t  ret;
	char start[] = "Scan Start ...\r\n";
 8000152:	4b28      	ldr	r3, [pc, #160]	@ (80001f4 <i2cScanner+0xa8>)
 8000154:	f107 0414 	add.w	r4, r7, #20
 8000158:	461d      	mov	r5, r3
 800015a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800015e:	682b      	ldr	r3, [r5, #0]
 8000160:	7023      	strb	r3, [r4, #0]
	char stop[]  = "Scan Stop  ...\r\n";
 8000162:	4b25      	ldr	r3, [pc, #148]	@ (80001f8 <i2cScanner+0xac>)
 8000164:	463c      	mov	r4, r7
 8000166:	461d      	mov	r5, r3
 8000168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800016c:	682b      	ldr	r3, [r5, #0]
 800016e:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t*)start, sizeof(start)-1, HAL_MAX_DELAY);
 8000170:	f107 0114 	add.w	r1, r7, #20
 8000174:	f04f 33ff 	mov.w	r3, #4294967295
 8000178:	2210      	movs	r2, #16
 800017a:	4820      	ldr	r0, [pc, #128]	@ (80001fc <i2cScanner+0xb0>)
 800017c:	f001 fcbe 	bl	8001afc <HAL_UART_Transmit>

	for (uint8_t i=0;i<128;i++)
 8000180:	2300      	movs	r3, #0
 8000182:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000186:	e025      	b.n	80001d4 <i2cScanner+0x88>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000188:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800018c:	b29b      	uxth	r3, r3
 800018e:	005b      	lsls	r3, r3, #1
 8000190:	b299      	uxth	r1, r3
 8000192:	2305      	movs	r3, #5
 8000194:	2203      	movs	r2, #3
 8000196:	481a      	ldr	r0, [pc, #104]	@ (8000200 <i2cScanner+0xb4>)
 8000198:	f000 fea8 	bl	8000eec <HAL_I2C_IsDeviceReady>
 800019c:	4603      	mov	r3, r0
 800019e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		if(ret == HAL_OK)
 80001a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d10f      	bne.n	80001ca <i2cScanner+0x7e>
		{
			sprintf(addr, "Found: 0x%02X\r\n", i);
 80001aa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80001ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001b2:	4914      	ldr	r1, [pc, #80]	@ (8000204 <i2cScanner+0xb8>)
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fe75 	bl	8001ea4 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)addr, sizeof(addr)-1, HAL_MAX_DELAY);
 80001ba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80001be:	f04f 33ff 	mov.w	r3, #4294967295
 80001c2:	220d      	movs	r2, #13
 80001c4:	480d      	ldr	r0, [pc, #52]	@ (80001fc <i2cScanner+0xb0>)
 80001c6:	f001 fc99 	bl	8001afc <HAL_UART_Transmit>
	for (uint8_t i=0;i<128;i++)
 80001ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80001ce:	3301      	adds	r3, #1
 80001d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80001d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80001d8:	2b00      	cmp	r3, #0
 80001da:	dad5      	bge.n	8000188 <i2cScanner+0x3c>
		}
	}

	HAL_UART_Transmit(&huart1, (uint8_t*)stop, sizeof(stop)-1, HAL_MAX_DELAY);
 80001dc:	4639      	mov	r1, r7
 80001de:	f04f 33ff 	mov.w	r3, #4294967295
 80001e2:	2210      	movs	r2, #16
 80001e4:	4805      	ldr	r0, [pc, #20]	@ (80001fc <i2cScanner+0xb0>)
 80001e6:	f001 fc89 	bl	8001afc <HAL_UART_Transmit>
}
 80001ea:	bf00      	nop
 80001ec:	3738      	adds	r7, #56	@ 0x38
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bdb0      	pop	{r4, r5, r7, pc}
 80001f2:	bf00      	nop
 80001f4:	0800282c 	.word	0x0800282c
 80001f8:	08002840 	.word	0x08002840
 80001fc:	200000cc 	.word	0x200000cc
 8000200:	20000078 	.word	0x20000078
 8000204:	0800281c 	.word	0x0800281c

08000208 <main>:


int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020c:	f000 fa48 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000210:	f000 f80a 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f000 f89c 	bl	8000350 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000218:	f000 f842 	bl	80002a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800021c:	f000 f86e 	bl	80002fc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  i2cScanner();
 8000220:	f7ff ff94 	bl	800014c <i2cScanner>
  while (1)
 8000224:	bf00      	nop
 8000226:	e7fd      	b.n	8000224 <main+0x1c>

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	@ 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fe56 	bl	8001ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000256:	2300      	movs	r3, #0
 8000258:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ffec 	bl	800123c <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800026a:	f000 f8c9 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000272:	2300      	movs	r3, #0
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fa5a 	bl	8001740 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000292:	f000 f8b5 	bl	8000400 <Error_Handler>
  }
}
 8000296:	bf00      	nop
 8000298:	3740      	adds	r7, #64	@ 0x40
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002a6:	4a13      	ldr	r2, [pc, #76]	@ (80002f4 <MX_I2C1_Init+0x54>)
 80002a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002aa:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002ac:	4a12      	ldr	r2, [pc, #72]	@ (80002f8 <MX_I2C1_Init+0x58>)
 80002ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002ca:	4b09      	ldr	r3, [pc, #36]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d0:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <MX_I2C1_Init+0x50>)
 80002de:	f000 fcc1 	bl	8000c64 <HAL_I2C_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002e8:	f000 f88a 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000078 	.word	0x20000078
 80002f4:	40005400 	.word	0x40005400
 80002f8:	000186a0 	.word	0x000186a0

080002fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000302:	4a12      	ldr	r2, [pc, #72]	@ (800034c <MX_USART1_UART_Init+0x50>)
 8000304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000306:	4b10      	ldr	r3, [pc, #64]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000308:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800030c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000322:	220c      	movs	r2, #12
 8000324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000326:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_USART1_UART_Init+0x4c>)
 8000334:	f001 fb92 	bl	8001a5c <HAL_UART_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033e:	f000 f85f 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200000cc 	.word	0x200000cc
 800034c:	40013800 	.word	0x40013800

08000350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a23      	ldr	r2, [pc, #140]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b21      	ldr	r3, [pc, #132]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b1e      	ldr	r3, [pc, #120]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a1d      	ldr	r2, [pc, #116]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b1b      	ldr	r3, [pc, #108]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60bb      	str	r3, [r7, #8]
 8000392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b18      	ldr	r3, [pc, #96]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a17      	ldr	r2, [pc, #92]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a11      	ldr	r2, [pc, #68]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_GPIO_Init+0xa8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <MX_GPIO_Init+0xac>)
 80003cc:	f000 fc32 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d6:	2301      	movs	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003de:	2302      	movs	r3, #2
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	4619      	mov	r1, r3
 80003e8:	4804      	ldr	r0, [pc, #16]	@ (80003fc <MX_GPIO_Init+0xac>)
 80003ea:	f000 fa9f 	bl	800092c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40011000 	.word	0x40011000

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <Error_Handler+0x8>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000412:	4b15      	ldr	r3, [pc, #84]	@ (8000468 <HAL_MspInit+0x5c>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a14      	ldr	r2, [pc, #80]	@ (8000468 <HAL_MspInit+0x5c>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60bb      	str	r3, [r7, #8]
 8000428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <HAL_MspInit+0x5c>)
 800042c:	69db      	ldr	r3, [r3, #28]
 800042e:	4a0e      	ldr	r2, [pc, #56]	@ (8000468 <HAL_MspInit+0x5c>)
 8000430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000434:	61d3      	str	r3, [r2, #28]
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000442:	4b0a      	ldr	r3, [pc, #40]	@ (800046c <HAL_MspInit+0x60>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	4a04      	ldr	r2, [pc, #16]	@ (800046c <HAL_MspInit+0x60>)
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b088      	sub	sp, #32
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a15      	ldr	r2, [pc, #84]	@ (80004e0 <HAL_I2C_MspInit+0x70>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d123      	bne.n	80004d8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a13      	ldr	r2, [pc, #76]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0308 	and.w	r3, r3, #8
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004a8:	23c0      	movs	r3, #192	@ 0xc0
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ac:	2312      	movs	r3, #18
 80004ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b0:	2303      	movs	r3, #3
 80004b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	4619      	mov	r1, r3
 80004ba:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <HAL_I2C_MspInit+0x78>)
 80004bc:	f000 fa36 	bl	800092c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 80004c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004ca:	61d3      	str	r3, [r2, #28]
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <HAL_I2C_MspInit+0x74>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40005400 	.word	0x40005400
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010c00 	.word	0x40010c00

080004ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a1c      	ldr	r2, [pc, #112]	@ (8000578 <HAL_UART_MspInit+0x8c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d131      	bne.n	8000570 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800050c:	4b1b      	ldr	r3, [pc, #108]	@ (800057c <HAL_UART_MspInit+0x90>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a1a      	ldr	r2, [pc, #104]	@ (800057c <HAL_UART_MspInit+0x90>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b18      	ldr	r3, [pc, #96]	@ (800057c <HAL_UART_MspInit+0x90>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b15      	ldr	r3, [pc, #84]	@ (800057c <HAL_UART_MspInit+0x90>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <HAL_UART_MspInit+0x90>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_UART_MspInit+0x90>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800053c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000542:	2302      	movs	r3, #2
 8000544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000546:	2303      	movs	r3, #3
 8000548:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	4619      	mov	r1, r3
 8000550:	480b      	ldr	r0, [pc, #44]	@ (8000580 <HAL_UART_MspInit+0x94>)
 8000552:	f000 f9eb 	bl	800092c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_UART_MspInit+0x94>)
 800056c:	f000 f9de 	bl	800092c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40013800 	.word	0x40013800
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <NMI_Handler+0x4>

0800058c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <MemManage_Handler+0x4>

0800059c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <UsageFault_Handler+0x4>

080005ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f8aa 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f001 fc74 	bl	8001ef8 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20005000 	.word	0x20005000
 800063c:	00000400 	.word	0x00000400
 8000640:	20000114 	.word	0x20000114
 8000644:	20000268 	.word	0x20000268

08000648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000654:	f7ff fff8 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065a:	490c      	ldr	r1, [pc, #48]	@ (800068c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800065c:	4a0c      	ldr	r2, [pc, #48]	@ (8000690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a09      	ldr	r2, [pc, #36]	@ (8000694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000670:	4c09      	ldr	r4, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067e:	f001 fc41 	bl	8001f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fdc1 	bl	8000208 <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000690:	080028bc 	.word	0x080028bc
  ldr r2, =_sbss
 8000694:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000698:	20000264 	.word	0x20000264

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	@ (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f907 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff fea6 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f911 	bl	8000912 <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f8e7 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	@ (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	20000118 	.word	0x20000118

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000118 	.word	0x20000118

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	@ (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	@ 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff49 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff5e 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffb0 	bl	8000880 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800092c:	b480      	push	{r7}
 800092e:	b08b      	sub	sp, #44	@ 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093e:	e169      	b.n	8000c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000940:	2201      	movs	r2, #1
 8000942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8158 	bne.w	8000c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	4a9a      	ldr	r2, [pc, #616]	@ (8000bcc <HAL_GPIO_Init+0x2a0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d05e      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000968:	4a98      	ldr	r2, [pc, #608]	@ (8000bcc <HAL_GPIO_Init+0x2a0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d875      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800096e:	4a98      	ldr	r2, [pc, #608]	@ (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d058      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000974:	4a96      	ldr	r2, [pc, #600]	@ (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d86f      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800097a:	4a96      	ldr	r2, [pc, #600]	@ (8000bd4 <HAL_GPIO_Init+0x2a8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d052      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000980:	4a94      	ldr	r2, [pc, #592]	@ (8000bd4 <HAL_GPIO_Init+0x2a8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d869      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 8000986:	4a94      	ldr	r2, [pc, #592]	@ (8000bd8 <HAL_GPIO_Init+0x2ac>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d04c      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 800098c:	4a92      	ldr	r2, [pc, #584]	@ (8000bd8 <HAL_GPIO_Init+0x2ac>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d863      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 8000992:	4a92      	ldr	r2, [pc, #584]	@ (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d046      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000998:	4a90      	ldr	r2, [pc, #576]	@ (8000bdc <HAL_GPIO_Init+0x2b0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d85d      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d82a      	bhi.n	80009f8 <HAL_GPIO_Init+0xcc>
 80009a2:	2b12      	cmp	r3, #18
 80009a4:	d859      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 80009a6:	a201      	add	r2, pc, #4	@ (adr r2, 80009ac <HAL_GPIO_Init+0x80>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a01 	.word	0x08000a01
 80009b4:	08000a13 	.word	0x08000a13
 80009b8:	08000a55 	.word	0x08000a55
 80009bc:	08000a5b 	.word	0x08000a5b
 80009c0:	08000a5b 	.word	0x08000a5b
 80009c4:	08000a5b 	.word	0x08000a5b
 80009c8:	08000a5b 	.word	0x08000a5b
 80009cc:	08000a5b 	.word	0x08000a5b
 80009d0:	08000a5b 	.word	0x08000a5b
 80009d4:	08000a5b 	.word	0x08000a5b
 80009d8:	08000a5b 	.word	0x08000a5b
 80009dc:	08000a5b 	.word	0x08000a5b
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a5b 	.word	0x08000a5b
 80009e8:	08000a5b 	.word	0x08000a5b
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a09 	.word	0x08000a09
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	4a79      	ldr	r2, [pc, #484]	@ (8000be0 <HAL_GPIO_Init+0x2b4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fe:	e02c      	b.n	8000a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e029      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e024      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	3308      	adds	r3, #8
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e01f      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	330c      	adds	r3, #12
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e01a      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e013      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d105      	bne.n	8000a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	611a      	str	r2, [r3, #16]
          break;
 8000a46:	e009      	b.n	8000a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	615a      	str	r2, [r3, #20]
          break;
 8000a52:	e003      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          break;
 8000a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2bff      	cmp	r3, #255	@ 0xff
 8000a60:	d801      	bhi.n	8000a66 <HAL_GPIO_Init+0x13a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	e001      	b.n	8000a6a <HAL_GPIO_Init+0x13e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2bff      	cmp	r3, #255	@ 0xff
 8000a70:	d802      	bhi.n	8000a78 <HAL_GPIO_Init+0x14c>
 8000a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x152>
 8000a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7a:	3b08      	subs	r3, #8
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	210f      	movs	r1, #15
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	6a39      	ldr	r1, [r7, #32]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80b1 	beq.w	8000c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aac:	4b4d      	ldr	r3, [pc, #308]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac4:	4a48      	ldr	r2, [pc, #288]	@ (8000be8 <HAL_GPIO_Init+0x2bc>)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a40      	ldr	r2, [pc, #256]	@ (8000bec <HAL_GPIO_Init+0x2c0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d013      	beq.n	8000b18 <HAL_GPIO_Init+0x1ec>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3f      	ldr	r2, [pc, #252]	@ (8000bf0 <HAL_GPIO_Init+0x2c4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00d      	beq.n	8000b14 <HAL_GPIO_Init+0x1e8>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf4 <HAL_GPIO_Init+0x2c8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d007      	beq.n	8000b10 <HAL_GPIO_Init+0x1e4>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf8 <HAL_GPIO_Init+0x2cc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_GPIO_Init+0x1e0>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e004      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b1c:	f002 0203 	and.w	r2, r2, #3
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b2a:	492f      	ldr	r1, [pc, #188]	@ (8000be8 <HAL_GPIO_Init+0x2bc>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b44:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	492c      	ldr	r1, [pc, #176]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	608b      	str	r3, [r1, #8]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4928      	ldr	r1, [pc, #160]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b6c:	4b23      	ldr	r3, [pc, #140]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	4922      	ldr	r1, [pc, #136]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60cb      	str	r3, [r1, #12]
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	491e      	ldr	r1, [pc, #120]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b84:	4013      	ands	r3, r2
 8000b86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4918      	ldr	r1, [pc, #96]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4914      	ldr	r1, [pc, #80]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d021      	beq.n	8000c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	490e      	ldr	r1, [pc, #56]	@ (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
 8000bc8:	e021      	b.n	8000c0e <HAL_GPIO_Init+0x2e2>
 8000bca:	bf00      	nop
 8000bcc:	10320000 	.word	0x10320000
 8000bd0:	10310000 	.word	0x10310000
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	10210000 	.word	0x10210000
 8000bdc:	10120000 	.word	0x10120000
 8000be0:	10110000 	.word	0x10110000
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40011400 	.word	0x40011400
 8000bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_GPIO_Init+0x304>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	4909      	ldr	r1, [pc, #36]	@ (8000c30 <HAL_GPIO_Init+0x304>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	3301      	adds	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f ae8e 	bne.w	8000940 <HAL_GPIO_Init+0x14>
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	372c      	adds	r7, #44	@ 0x2c
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
 8000c40:	4613      	mov	r3, r2
 8000c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c44:	787b      	ldrb	r3, [r7, #1]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c50:	e003      	b.n	8000c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	041a      	lsls	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e12b      	b.n	8000ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2200      	movs	r2, #0
 8000c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fbf0 	bl	8000470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0201 	bic.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cc8:	f000 fe82 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8000ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	4a81      	ldr	r2, [pc, #516]	@ (8000ed8 <HAL_I2C_Init+0x274>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d807      	bhi.n	8000ce8 <HAL_I2C_Init+0x84>
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4a80      	ldr	r2, [pc, #512]	@ (8000edc <HAL_I2C_Init+0x278>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	bf94      	ite	ls
 8000ce0:	2301      	movls	r3, #1
 8000ce2:	2300      	movhi	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	e006      	b.n	8000cf6 <HAL_I2C_Init+0x92>
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4a7d      	ldr	r2, [pc, #500]	@ (8000ee0 <HAL_I2C_Init+0x27c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	bf94      	ite	ls
 8000cf0:	2301      	movls	r3, #1
 8000cf2:	2300      	movhi	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0e7      	b.n	8000ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4a78      	ldr	r2, [pc, #480]	@ (8000ee4 <HAL_I2C_Init+0x280>)
 8000d02:	fba2 2303 	umull	r2, r3, r2, r3
 8000d06:	0c9b      	lsrs	r3, r3, #18
 8000d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68ba      	ldr	r2, [r7, #8]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed8 <HAL_I2C_Init+0x274>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d802      	bhi.n	8000d38 <HAL_I2C_Init+0xd4>
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3301      	adds	r3, #1
 8000d36:	e009      	b.n	8000d4c <HAL_I2C_Init+0xe8>
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a69      	ldr	r2, [pc, #420]	@ (8000ee8 <HAL_I2C_Init+0x284>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000d5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	495c      	ldr	r1, [pc, #368]	@ (8000ed8 <HAL_I2C_Init+0x274>)
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d819      	bhi.n	8000da0 <HAL_I2C_Init+0x13c>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1e59      	subs	r1, r3, #1
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d7a:	1c59      	adds	r1, r3, #1
 8000d7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000d80:	400b      	ands	r3, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00a      	beq.n	8000d9c <HAL_I2C_Init+0x138>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	1e59      	subs	r1, r3, #1
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9a:	e051      	b.n	8000e40 <HAL_I2C_Init+0x1dc>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e04f      	b.n	8000e40 <HAL_I2C_Init+0x1dc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d111      	bne.n	8000dcc <HAL_I2C_Init+0x168>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	1e58      	subs	r0, r3, #1
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6859      	ldr	r1, [r3, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	440b      	add	r3, r1
 8000db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf0c      	ite	eq
 8000dc4:	2301      	moveq	r3, #1
 8000dc6:	2300      	movne	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	e012      	b.n	8000df2 <HAL_I2C_Init+0x18e>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1e58      	subs	r0, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6859      	ldr	r1, [r3, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	0099      	lsls	r1, r3, #2
 8000ddc:	440b      	add	r3, r1
 8000dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2C_Init+0x196>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e022      	b.n	8000e40 <HAL_I2C_Init+0x1dc>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10e      	bne.n	8000e20 <HAL_I2C_Init+0x1bc>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1e58      	subs	r0, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6859      	ldr	r1, [r3, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	440b      	add	r3, r1
 8000e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e14:	3301      	adds	r3, #1
 8000e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e1e:	e00f      	b.n	8000e40 <HAL_I2C_Init+0x1dc>
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	1e58      	subs	r0, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6859      	ldr	r1, [r3, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	0099      	lsls	r1, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e36:	3301      	adds	r3, #1
 8000e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	6809      	ldr	r1, [r1, #0]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6911      	ldr	r1, [r2, #16]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68d2      	ldr	r2, [r2, #12]
 8000e7a:	4311      	orrs	r1, r2
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	431a      	orrs	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 0201 	orr.w	r2, r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2220      	movs	r2, #32
 8000eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	000186a0 	.word	0x000186a0
 8000edc:	001e847f 	.word	0x001e847f
 8000ee0:	003d08ff 	.word	0x003d08ff
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	10624dd3 	.word	0x10624dd3

08000eec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fc28 	bl	8000750 <HAL_GetTick>
 8000f00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b20      	cmp	r3, #32
 8000f10:	f040 8111 	bne.w	8001136 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2319      	movs	r3, #25
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4988      	ldr	r1, [pc, #544]	@ (8001140 <HAL_I2C_IsDeviceReady+0x254>)
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f912 	bl	8001148 <I2C_WaitOnFlagUntilTimeout>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e104      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d101      	bne.n	8000f3c <HAL_I2C_IsDeviceReady+0x50>
 8000f38:	2302      	movs	r3, #2
 8000f3a:	e0fd      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d007      	beq.n	8000f62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f042 0201 	orr.w	r2, r2, #1
 8000f60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2224      	movs	r2, #36	@ 0x24
 8000f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a70      	ldr	r2, [pc, #448]	@ (8001144 <HAL_I2C_IsDeviceReady+0x258>)
 8000f84:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f8d0 	bl	8001148 <I2C_WaitOnFlagUntilTimeout>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00d      	beq.n	8000fca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fbc:	d103      	bne.n	8000fc6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e0b6      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000fca:	897b      	ldrh	r3, [r7, #10]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8000fd8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fbb9 	bl	8000750 <HAL_GetTick>
 8000fde:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	bf0c      	ite	eq
 8000fee:	2301      	moveq	r3, #1
 8000ff0:	2300      	movne	r3, #0
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001004:	bf0c      	ite	eq
 8001006:	2301      	moveq	r3, #1
 8001008:	2300      	movne	r3, #0
 800100a:	b2db      	uxtb	r3, r3
 800100c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800100e:	e025      	b.n	800105c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001010:	f7ff fb9e 	bl	8000750 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d302      	bcc.n	8001026 <HAL_I2C_IsDeviceReady+0x13a>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d103      	bne.n	800102e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	22a0      	movs	r2, #160	@ 0xa0
 800102a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b02      	cmp	r3, #2
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001052:	bf0c      	ite	eq
 8001054:	2301      	moveq	r3, #1
 8001056:	2300      	movne	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2ba0      	cmp	r3, #160	@ 0xa0
 8001066:	d005      	beq.n	8001074 <HAL_I2C_IsDeviceReady+0x188>
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d102      	bne.n	8001074 <HAL_I2C_IsDeviceReady+0x188>
 800106e:	7dbb      	ldrb	r3, [r7, #22]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0cd      	beq.n	8001010 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2220      	movs	r2, #32
 8001078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b02      	cmp	r3, #2
 8001088:	d129      	bne.n	80010de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001098:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2319      	movs	r3, #25
 80010b6:	2201      	movs	r2, #1
 80010b8:	4921      	ldr	r1, [pc, #132]	@ (8001140 <HAL_I2C_IsDeviceReady+0x254>)
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f844 	bl	8001148 <I2C_WaitOnFlagUntilTimeout>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e036      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2220      	movs	r2, #32
 80010ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e02c      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80010f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2319      	movs	r3, #25
 80010fe:	2201      	movs	r2, #1
 8001100:	490f      	ldr	r1, [pc, #60]	@ (8001140 <HAL_I2C_IsDeviceReady+0x254>)
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 f820 	bl	8001148 <I2C_WaitOnFlagUntilTimeout>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e012      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	3301      	adds	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	f4ff af32 	bcc.w	8000f86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2220      	movs	r2, #32
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001136:	2302      	movs	r3, #2
  }
}
 8001138:	4618      	mov	r0, r3
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	00100002 	.word	0x00100002
 8001144:	ffff0000 	.word	0xffff0000

08001148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001158:	e048      	b.n	80011ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d044      	beq.n	80011ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001162:	f7ff faf5 	bl	8000750 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d302      	bcc.n	8001178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d139      	bne.n	80011ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	0c1b      	lsrs	r3, r3, #16
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10d      	bne.n	800119e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	43da      	mvns	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	4013      	ands	r3, r2
 800118e:	b29b      	uxth	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	e00c      	b.n	80011b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	43da      	mvns	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	4013      	ands	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	461a      	mov	r2, r3
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d116      	bne.n	80011ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2220      	movs	r2, #32
 80011c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f043 0220 	orr.w	r2, r3, #32
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e023      	b.n	8001234 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	0c1b      	lsrs	r3, r3, #16
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10d      	bne.n	8001212 <I2C_WaitOnFlagUntilTimeout+0xca>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4013      	ands	r3, r2
 8001202:	b29b      	uxth	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	e00c      	b.n	800122c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	43da      	mvns	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	4013      	ands	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	bf0c      	ite	eq
 8001224:	2301      	moveq	r3, #1
 8001226:	2300      	movne	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	461a      	mov	r2, r3
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	429a      	cmp	r2, r3
 8001230:	d093      	beq.n	800115a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e272      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800125c:	4b92      	ldr	r3, [pc, #584]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d00c      	beq.n	8001282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	4b8f      	ldr	r3, [pc, #572]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d112      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
 8001274:	4b8c      	ldr	r3, [pc, #560]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001280:	d10b      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d06c      	beq.n	8001368 <HAL_RCC_OscConfig+0x12c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d168      	bne.n	8001368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e24c      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x76>
 80012a4:	4b80      	ldr	r3, [pc, #512]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7f      	ldr	r2, [pc, #508]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e02e      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b7b      	ldr	r3, [pc, #492]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7a      	ldr	r2, [pc, #488]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b78      	ldr	r3, [pc, #480]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a77      	ldr	r2, [pc, #476]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0xbc>
 80012de:	4b72      	ldr	r3, [pc, #456]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a71      	ldr	r2, [pc, #452]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012f8:	4b6b      	ldr	r3, [pc, #428]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b68      	ldr	r3, [pc, #416]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a67      	ldr	r2, [pc, #412]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fa1a 	bl	8000750 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fa16 	bl	8000750 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	@ 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e200      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5d      	ldr	r3, [pc, #372]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xe4>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa06 	bl	8000750 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fa02 	bl	8000750 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1ec      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x10c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	4b4c      	ldr	r3, [pc, #304]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
 800138e:	4b46      	ldr	r3, [pc, #280]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1c0      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3d      	ldr	r3, [pc, #244]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4939      	ldr	r1, [pc, #228]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff f9bb 	bl	8000750 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff f9b7 	bl	8000750 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1a1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4927      	ldr	r1, [pc, #156]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <HAL_RCC_OscConfig+0x270>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff f99a 	bl	8000750 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff f996 	bl	8000750 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e180      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03a      	beq.n	80014c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d019      	beq.n	8001486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff f97a 	bl	8000750 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff f976 	bl	8000750 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e160      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 face 	bl	8001a20 <RCC_Delay>
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff f960 	bl	8000750 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001492:	e00f      	b.n	80014b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff f95c 	bl	8000750 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d908      	bls.n	80014b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e146      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42420000 	.word	0x42420000
 80014b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b92      	ldr	r3, [pc, #584]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e9      	bne.n	8001494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a6 	beq.w	800161a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b88      	ldr	r3, [pc, #544]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a87      	ldr	r2, [pc, #540]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b85      	ldr	r3, [pc, #532]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b82      	ldr	r3, [pc, #520]	@ (8001704 <HAL_RCC_OscConfig+0x4c8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b7f      	ldr	r3, [pc, #508]	@ (8001704 <HAL_RCC_OscConfig+0x4c8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a7e      	ldr	r2, [pc, #504]	@ (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff f91d 	bl	8000750 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff f919 	bl	8000750 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	@ 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e103      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b75      	ldr	r3, [pc, #468]	@ (8001704 <HAL_RCC_OscConfig+0x4c8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x312>
 8001540:	4b6f      	ldr	r3, [pc, #444]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a6e      	ldr	r2, [pc, #440]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e02d      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001556:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a69      	ldr	r2, [pc, #420]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b67      	ldr	r3, [pc, #412]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a66      	ldr	r2, [pc, #408]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x356>
 8001578:	4b61      	ldr	r3, [pc, #388]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a60      	ldr	r2, [pc, #384]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	4b5e      	ldr	r3, [pc, #376]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a5d      	ldr	r2, [pc, #372]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001592:	4b5b      	ldr	r3, [pc, #364]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a5a      	ldr	r2, [pc, #360]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d015      	beq.n	80015de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f8cd 	bl	8000750 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff f8c9 	bl	8000750 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0b1      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ee      	beq.n	80015ba <HAL_RCC_OscConfig+0x37e>
 80015dc:	e014      	b.n	8001608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f8b7 	bl	8000750 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff f8b3 	bl	8000750 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e09b      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b3c      	ldr	r3, [pc, #240]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a3b      	ldr	r2, [pc, #236]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8087 	beq.w	8001732 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d061      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d146      	bne.n	80016c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f887 	bl	8000750 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f883 	bl	8000750 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e06d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4921      	ldr	r1, [pc, #132]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a19      	ldr	r1, [r3, #32]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	430b      	orrs	r3, r1
 8001692:	491b      	ldr	r1, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f857 	bl	8000750 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff f853 	bl	8000750 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46a>
 80016c4:	e035      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <HAL_RCC_OscConfig+0x4cc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f840 	bl	8000750 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f83c 	bl	8000750 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e026      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x498>
 80016f2:	e01e      	b.n	8001732 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e019      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
 8001700:	40021000 	.word	0x40021000
 8001704:	40007000 	.word	0x40007000
 8001708:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_RCC_OscConfig+0x500>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	429a      	cmp	r2, r3
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000

08001740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0d0      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001754:	4b6a      	ldr	r3, [pc, #424]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	429a      	cmp	r2, r3
 8001760:	d910      	bls.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001762:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 0207 	bic.w	r2, r3, #7
 800176a:	4965      	ldr	r1, [pc, #404]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b63      	ldr	r3, [pc, #396]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b8      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d020      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800179c:	4b59      	ldr	r3, [pc, #356]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a58      	ldr	r2, [pc, #352]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c0:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	494d      	ldr	r1, [pc, #308]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d040      	beq.n	8001860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e07f      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e073      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e06b      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4936      	ldr	r1, [pc, #216]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001830:	f7fe ff8e 	bl	8000750 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7fe ff8a 	bl	8000750 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e053      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d210      	bcs.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0207 	bic.w	r2, r3, #7
 8001876:	4922      	ldr	r1, [pc, #136]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e032      	b.n	80018f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d008      	beq.n	80018ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4916      	ldr	r1, [pc, #88]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ba:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	490e      	ldr	r1, [pc, #56]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ce:	f000 f821 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490a      	ldr	r1, [pc, #40]	@ (8001908 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a09      	ldr	r2, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1cc>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_ClockConfig+0x1d0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe feec 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40022000 	.word	0x40022000
 8001904:	40021000 	.word	0x40021000
 8001908:	08002854 	.word	0x08002854
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800192e:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b04      	cmp	r3, #4
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
 800193e:	2b08      	cmp	r3, #8
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x36>
 8001942:	e027      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001944:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	e027      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	0c9b      	lsrs	r3, r3, #18
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a17      	ldr	r2, [pc, #92]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0c5b      	lsrs	r3, r3, #17
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	4a11      	ldr	r2, [pc, #68]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001976:	fb03 f202 	mul.w	r2, r3, r2
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e004      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a0c      	ldr	r2, [pc, #48]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001996:	613b      	str	r3, [r7, #16]
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	693b      	ldr	r3, [r7, #16]
}
 800199c:	4618      	mov	r0, r3
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	0800286c 	.word	0x0800286c
 80019b4:	0800287c 	.word	0x0800287c
 80019b8:	003d0900 	.word	0x003d0900

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b02      	ldr	r3, [pc, #8]	@ (80019cc <HAL_RCC_GetHCLKFreq+0x10>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000000 	.word	0x20000000

080019d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d4:	f7ff fff2 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	4903      	ldr	r1, [pc, #12]	@ (80019f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08002864 	.word	0x08002864

080019f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019fc:	f7ff ffde 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0adb      	lsrs	r3, r3, #11
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	@ (8001a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08002864 	.word	0x08002864

08001a20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <RCC_Delay+0x34>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <RCC_Delay+0x38>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0a5b      	lsrs	r3, r3, #9
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	fb02 f303 	mul.w	r3, r2, r3
 8001a3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a3c:	bf00      	nop
  }
  while (Delay --);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	60fa      	str	r2, [r7, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <RCC_Delay+0x1c>
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	20000000 	.word	0x20000000
 8001a58:	10624dd3 	.word	0x10624dd3

08001a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e042      	b.n	8001af4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d106      	bne.n	8001a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd32 	bl	80004ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f971 	bl	8001d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695a      	ldr	r2, [r3, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d175      	bne.n	8001c08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_UART_Transmit+0x2c>
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e06e      	b.n	8001c0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2221      	movs	r2, #33	@ 0x21
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fe09 	bl	8000750 <HAL_GetTick>
 8001b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	88fa      	ldrh	r2, [r7, #6]
 8001b44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	88fa      	ldrh	r2, [r7, #6]
 8001b4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b54:	d108      	bne.n	8001b68 <HAL_UART_Transmit+0x6c>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	e003      	b.n	8001b70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b70:	e02e      	b.n	8001bd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2180      	movs	r1, #128	@ 0x80
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f000 f848 	bl	8001c12 <UART_WaitOnFlagUntilTimeout>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e03a      	b.n	8001c0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10b      	bne.n	8001bb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	3302      	adds	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e007      	b.n	8001bc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1cb      	bne.n	8001b72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2200      	movs	r2, #0
 8001be2:	2140      	movs	r1, #64	@ 0x40
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 f814 	bl	8001c12 <UART_WaitOnFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e006      	b.n	8001c0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e000      	b.n	8001c0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c22:	e03b      	b.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d037      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2c:	f7fe fd90 	bl	8000750 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	6a3a      	ldr	r2, [r7, #32]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d302      	bcc.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e03a      	b.n	8001cbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b80      	cmp	r3, #128	@ 0x80
 8001c58:	d020      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b40      	cmp	r3, #64	@ 0x40
 8001c5e:	d01d      	beq.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d116      	bne.n	8001c9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f81d 	bl	8001cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e00f      	b.n	8001cbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d0b4      	beq.n	8001c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b095      	sub	sp, #84	@ 0x54
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	330c      	adds	r3, #12
 8001cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd6:	e853 3f00 	ldrex	r3, [r3]
 8001cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cec:	643a      	str	r2, [r7, #64]	@ 0x40
 8001cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cf4:	e841 2300 	strex	r3, r2, [r1]
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1e5      	bne.n	8001ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3314      	adds	r3, #20
 8001d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	e853 3f00 	ldrex	r3, [r3]
 8001d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	3314      	adds	r3, #20
 8001d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d28:	e841 2300 	strex	r3, r2, [r1]
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1e5      	bne.n	8001d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d119      	bne.n	8001d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	330c      	adds	r3, #12
 8001d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	e853 3f00 	ldrex	r3, [r3]
 8001d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f023 0310 	bic.w	r3, r3, #16
 8001d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	330c      	adds	r3, #12
 8001d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d5c:	61ba      	str	r2, [r7, #24]
 8001d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d60:	6979      	ldr	r1, [r7, #20]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	e841 2300 	strex	r3, r2, [r1]
 8001d68:	613b      	str	r3, [r7, #16]
   return(result);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e5      	bne.n	8001d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2220      	movs	r2, #32
 8001d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d7e:	bf00      	nop
 8001d80:	3754      	adds	r7, #84	@ 0x54
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001dc2:	f023 030c 	bic.w	r3, r3, #12
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2c      	ldr	r2, [pc, #176]	@ (8001e9c <UART_SetConfig+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d103      	bne.n	8001df8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001df0:	f7ff fe02 	bl	80019f8 <HAL_RCC_GetPCLK2Freq>
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	e002      	b.n	8001dfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001df8:	f7ff fdea 	bl	80019d0 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	009a      	lsls	r2, r3, #2
 8001e08:	441a      	add	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	4a22      	ldr	r2, [pc, #136]	@ (8001ea0 <UART_SetConfig+0x118>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	0119      	lsls	r1, r3, #4
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009a      	lsls	r2, r3, #2
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <UART_SetConfig+0x118>)
 8001e36:	fba3 0302 	umull	r0, r3, r3, r2
 8001e3a:	095b      	lsrs	r3, r3, #5
 8001e3c:	2064      	movs	r0, #100	@ 0x64
 8001e3e:	fb00 f303 	mul.w	r3, r0, r3
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	3332      	adds	r3, #50	@ 0x32
 8001e48:	4a15      	ldr	r2, [pc, #84]	@ (8001ea0 <UART_SetConfig+0x118>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e54:	4419      	add	r1, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	009a      	lsls	r2, r3, #2
 8001e60:	441a      	add	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <UART_SetConfig+0x118>)
 8001e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2064      	movs	r0, #100	@ 0x64
 8001e76:	fb00 f303 	mul.w	r3, r0, r3
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	3332      	adds	r3, #50	@ 0x32
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <UART_SetConfig+0x118>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	440a      	add	r2, r1
 8001e92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	51eb851f 	.word	0x51eb851f

08001ea4 <siprintf>:
 8001ea4:	b40e      	push	{r1, r2, r3}
 8001ea6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	2400      	movs	r4, #0
 8001eae:	b09d      	sub	sp, #116	@ 0x74
 8001eb0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001eb2:	9002      	str	r0, [sp, #8]
 8001eb4:	9006      	str	r0, [sp, #24]
 8001eb6:	9107      	str	r1, [sp, #28]
 8001eb8:	9104      	str	r1, [sp, #16]
 8001eba:	4809      	ldr	r0, [pc, #36]	@ (8001ee0 <siprintf+0x3c>)
 8001ebc:	4909      	ldr	r1, [pc, #36]	@ (8001ee4 <siprintf+0x40>)
 8001ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ec2:	9105      	str	r1, [sp, #20]
 8001ec4:	6800      	ldr	r0, [r0, #0]
 8001ec6:	a902      	add	r1, sp, #8
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001ecc:	f000 f992 	bl	80021f4 <_svfiprintf_r>
 8001ed0:	9b02      	ldr	r3, [sp, #8]
 8001ed2:	701c      	strb	r4, [r3, #0]
 8001ed4:	b01d      	add	sp, #116	@ 0x74
 8001ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eda:	b003      	add	sp, #12
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	ffff0208 	.word	0xffff0208

08001ee8 <memset>:
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4402      	add	r2, r0
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <memset+0xa>
 8001ef0:	4770      	bx	lr
 8001ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef6:	e7f9      	b.n	8001eec <memset+0x4>

08001ef8 <__errno>:
 8001ef8:	4b01      	ldr	r3, [pc, #4]	@ (8001f00 <__errno+0x8>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c

08001f04 <__libc_init_array>:
 8001f04:	b570      	push	{r4, r5, r6, lr}
 8001f06:	2600      	movs	r6, #0
 8001f08:	4d0c      	ldr	r5, [pc, #48]	@ (8001f3c <__libc_init_array+0x38>)
 8001f0a:	4c0d      	ldr	r4, [pc, #52]	@ (8001f40 <__libc_init_array+0x3c>)
 8001f0c:	1b64      	subs	r4, r4, r5
 8001f0e:	10a4      	asrs	r4, r4, #2
 8001f10:	42a6      	cmp	r6, r4
 8001f12:	d109      	bne.n	8001f28 <__libc_init_array+0x24>
 8001f14:	f000 fc76 	bl	8002804 <_init>
 8001f18:	2600      	movs	r6, #0
 8001f1a:	4d0a      	ldr	r5, [pc, #40]	@ (8001f44 <__libc_init_array+0x40>)
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <__libc_init_array+0x44>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	42a6      	cmp	r6, r4
 8001f24:	d105      	bne.n	8001f32 <__libc_init_array+0x2e>
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2c:	4798      	blx	r3
 8001f2e:	3601      	adds	r6, #1
 8001f30:	e7ee      	b.n	8001f10 <__libc_init_array+0xc>
 8001f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f36:	4798      	blx	r3
 8001f38:	3601      	adds	r6, #1
 8001f3a:	e7f2      	b.n	8001f22 <__libc_init_array+0x1e>
 8001f3c:	080028b4 	.word	0x080028b4
 8001f40:	080028b4 	.word	0x080028b4
 8001f44:	080028b4 	.word	0x080028b4
 8001f48:	080028b8 	.word	0x080028b8

08001f4c <__retarget_lock_acquire_recursive>:
 8001f4c:	4770      	bx	lr

08001f4e <__retarget_lock_release_recursive>:
 8001f4e:	4770      	bx	lr

08001f50 <_free_r>:
 8001f50:	b538      	push	{r3, r4, r5, lr}
 8001f52:	4605      	mov	r5, r0
 8001f54:	2900      	cmp	r1, #0
 8001f56:	d040      	beq.n	8001fda <_free_r+0x8a>
 8001f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f5c:	1f0c      	subs	r4, r1, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bfb8      	it	lt
 8001f62:	18e4      	addlt	r4, r4, r3
 8001f64:	f000 f8de 	bl	8002124 <__malloc_lock>
 8001f68:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <_free_r+0x8c>)
 8001f6a:	6813      	ldr	r3, [r2, #0]
 8001f6c:	b933      	cbnz	r3, 8001f7c <_free_r+0x2c>
 8001f6e:	6063      	str	r3, [r4, #4]
 8001f70:	6014      	str	r4, [r2, #0]
 8001f72:	4628      	mov	r0, r5
 8001f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f78:	f000 b8da 	b.w	8002130 <__malloc_unlock>
 8001f7c:	42a3      	cmp	r3, r4
 8001f7e:	d908      	bls.n	8001f92 <_free_r+0x42>
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	1821      	adds	r1, r4, r0
 8001f84:	428b      	cmp	r3, r1
 8001f86:	bf01      	itttt	eq
 8001f88:	6819      	ldreq	r1, [r3, #0]
 8001f8a:	685b      	ldreq	r3, [r3, #4]
 8001f8c:	1809      	addeq	r1, r1, r0
 8001f8e:	6021      	streq	r1, [r4, #0]
 8001f90:	e7ed      	b.n	8001f6e <_free_r+0x1e>
 8001f92:	461a      	mov	r2, r3
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	b10b      	cbz	r3, 8001f9c <_free_r+0x4c>
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	d9fa      	bls.n	8001f92 <_free_r+0x42>
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	1850      	adds	r0, r2, r1
 8001fa0:	42a0      	cmp	r0, r4
 8001fa2:	d10b      	bne.n	8001fbc <_free_r+0x6c>
 8001fa4:	6820      	ldr	r0, [r4, #0]
 8001fa6:	4401      	add	r1, r0
 8001fa8:	1850      	adds	r0, r2, r1
 8001faa:	4283      	cmp	r3, r0
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	d1e0      	bne.n	8001f72 <_free_r+0x22>
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4408      	add	r0, r1
 8001fb6:	6010      	str	r0, [r2, #0]
 8001fb8:	6053      	str	r3, [r2, #4]
 8001fba:	e7da      	b.n	8001f72 <_free_r+0x22>
 8001fbc:	d902      	bls.n	8001fc4 <_free_r+0x74>
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	e7d6      	b.n	8001f72 <_free_r+0x22>
 8001fc4:	6820      	ldr	r0, [r4, #0]
 8001fc6:	1821      	adds	r1, r4, r0
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	bf01      	itttt	eq
 8001fcc:	6819      	ldreq	r1, [r3, #0]
 8001fce:	685b      	ldreq	r3, [r3, #4]
 8001fd0:	1809      	addeq	r1, r1, r0
 8001fd2:	6021      	streq	r1, [r4, #0]
 8001fd4:	6063      	str	r3, [r4, #4]
 8001fd6:	6054      	str	r4, [r2, #4]
 8001fd8:	e7cb      	b.n	8001f72 <_free_r+0x22>
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
 8001fdc:	20000260 	.word	0x20000260

08001fe0 <sbrk_aligned>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8002020 <sbrk_aligned+0x40>)
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	6831      	ldr	r1, [r6, #0]
 8001fe8:	4605      	mov	r5, r0
 8001fea:	b911      	cbnz	r1, 8001ff2 <sbrk_aligned+0x12>
 8001fec:	f000 fba8 	bl	8002740 <_sbrk_r>
 8001ff0:	6030      	str	r0, [r6, #0]
 8001ff2:	4621      	mov	r1, r4
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f000 fba3 	bl	8002740 <_sbrk_r>
 8001ffa:	1c43      	adds	r3, r0, #1
 8001ffc:	d103      	bne.n	8002006 <sbrk_aligned+0x26>
 8001ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8002002:	4620      	mov	r0, r4
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	1cc4      	adds	r4, r0, #3
 8002008:	f024 0403 	bic.w	r4, r4, #3
 800200c:	42a0      	cmp	r0, r4
 800200e:	d0f8      	beq.n	8002002 <sbrk_aligned+0x22>
 8002010:	1a21      	subs	r1, r4, r0
 8002012:	4628      	mov	r0, r5
 8002014:	f000 fb94 	bl	8002740 <_sbrk_r>
 8002018:	3001      	adds	r0, #1
 800201a:	d1f2      	bne.n	8002002 <sbrk_aligned+0x22>
 800201c:	e7ef      	b.n	8001ffe <sbrk_aligned+0x1e>
 800201e:	bf00      	nop
 8002020:	2000025c 	.word	0x2000025c

08002024 <_malloc_r>:
 8002024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002028:	1ccd      	adds	r5, r1, #3
 800202a:	f025 0503 	bic.w	r5, r5, #3
 800202e:	3508      	adds	r5, #8
 8002030:	2d0c      	cmp	r5, #12
 8002032:	bf38      	it	cc
 8002034:	250c      	movcc	r5, #12
 8002036:	2d00      	cmp	r5, #0
 8002038:	4606      	mov	r6, r0
 800203a:	db01      	blt.n	8002040 <_malloc_r+0x1c>
 800203c:	42a9      	cmp	r1, r5
 800203e:	d904      	bls.n	800204a <_malloc_r+0x26>
 8002040:	230c      	movs	r3, #12
 8002042:	6033      	str	r3, [r6, #0]
 8002044:	2000      	movs	r0, #0
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800204a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002120 <_malloc_r+0xfc>
 800204e:	f000 f869 	bl	8002124 <__malloc_lock>
 8002052:	f8d8 3000 	ldr.w	r3, [r8]
 8002056:	461c      	mov	r4, r3
 8002058:	bb44      	cbnz	r4, 80020ac <_malloc_r+0x88>
 800205a:	4629      	mov	r1, r5
 800205c:	4630      	mov	r0, r6
 800205e:	f7ff ffbf 	bl	8001fe0 <sbrk_aligned>
 8002062:	1c43      	adds	r3, r0, #1
 8002064:	4604      	mov	r4, r0
 8002066:	d158      	bne.n	800211a <_malloc_r+0xf6>
 8002068:	f8d8 4000 	ldr.w	r4, [r8]
 800206c:	4627      	mov	r7, r4
 800206e:	2f00      	cmp	r7, #0
 8002070:	d143      	bne.n	80020fa <_malloc_r+0xd6>
 8002072:	2c00      	cmp	r4, #0
 8002074:	d04b      	beq.n	800210e <_malloc_r+0xea>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	4639      	mov	r1, r7
 800207a:	4630      	mov	r0, r6
 800207c:	eb04 0903 	add.w	r9, r4, r3
 8002080:	f000 fb5e 	bl	8002740 <_sbrk_r>
 8002084:	4581      	cmp	r9, r0
 8002086:	d142      	bne.n	800210e <_malloc_r+0xea>
 8002088:	6821      	ldr	r1, [r4, #0]
 800208a:	4630      	mov	r0, r6
 800208c:	1a6d      	subs	r5, r5, r1
 800208e:	4629      	mov	r1, r5
 8002090:	f7ff ffa6 	bl	8001fe0 <sbrk_aligned>
 8002094:	3001      	adds	r0, #1
 8002096:	d03a      	beq.n	800210e <_malloc_r+0xea>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	442b      	add	r3, r5
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	f8d8 3000 	ldr.w	r3, [r8]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	bb62      	cbnz	r2, 8002100 <_malloc_r+0xdc>
 80020a6:	f8c8 7000 	str.w	r7, [r8]
 80020aa:	e00f      	b.n	80020cc <_malloc_r+0xa8>
 80020ac:	6822      	ldr	r2, [r4, #0]
 80020ae:	1b52      	subs	r2, r2, r5
 80020b0:	d420      	bmi.n	80020f4 <_malloc_r+0xd0>
 80020b2:	2a0b      	cmp	r2, #11
 80020b4:	d917      	bls.n	80020e6 <_malloc_r+0xc2>
 80020b6:	1961      	adds	r1, r4, r5
 80020b8:	42a3      	cmp	r3, r4
 80020ba:	6025      	str	r5, [r4, #0]
 80020bc:	bf18      	it	ne
 80020be:	6059      	strne	r1, [r3, #4]
 80020c0:	6863      	ldr	r3, [r4, #4]
 80020c2:	bf08      	it	eq
 80020c4:	f8c8 1000 	streq.w	r1, [r8]
 80020c8:	5162      	str	r2, [r4, r5]
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f82f 	bl	8002130 <__malloc_unlock>
 80020d2:	f104 000b 	add.w	r0, r4, #11
 80020d6:	1d23      	adds	r3, r4, #4
 80020d8:	f020 0007 	bic.w	r0, r0, #7
 80020dc:	1ac2      	subs	r2, r0, r3
 80020de:	bf1c      	itt	ne
 80020e0:	1a1b      	subne	r3, r3, r0
 80020e2:	50a3      	strne	r3, [r4, r2]
 80020e4:	e7af      	b.n	8002046 <_malloc_r+0x22>
 80020e6:	6862      	ldr	r2, [r4, #4]
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	bf0c      	ite	eq
 80020ec:	f8c8 2000 	streq.w	r2, [r8]
 80020f0:	605a      	strne	r2, [r3, #4]
 80020f2:	e7eb      	b.n	80020cc <_malloc_r+0xa8>
 80020f4:	4623      	mov	r3, r4
 80020f6:	6864      	ldr	r4, [r4, #4]
 80020f8:	e7ae      	b.n	8002058 <_malloc_r+0x34>
 80020fa:	463c      	mov	r4, r7
 80020fc:	687f      	ldr	r7, [r7, #4]
 80020fe:	e7b6      	b.n	800206e <_malloc_r+0x4a>
 8002100:	461a      	mov	r2, r3
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	42a3      	cmp	r3, r4
 8002106:	d1fb      	bne.n	8002100 <_malloc_r+0xdc>
 8002108:	2300      	movs	r3, #0
 800210a:	6053      	str	r3, [r2, #4]
 800210c:	e7de      	b.n	80020cc <_malloc_r+0xa8>
 800210e:	230c      	movs	r3, #12
 8002110:	4630      	mov	r0, r6
 8002112:	6033      	str	r3, [r6, #0]
 8002114:	f000 f80c 	bl	8002130 <__malloc_unlock>
 8002118:	e794      	b.n	8002044 <_malloc_r+0x20>
 800211a:	6005      	str	r5, [r0, #0]
 800211c:	e7d6      	b.n	80020cc <_malloc_r+0xa8>
 800211e:	bf00      	nop
 8002120:	20000260 	.word	0x20000260

08002124 <__malloc_lock>:
 8002124:	4801      	ldr	r0, [pc, #4]	@ (800212c <__malloc_lock+0x8>)
 8002126:	f7ff bf11 	b.w	8001f4c <__retarget_lock_acquire_recursive>
 800212a:	bf00      	nop
 800212c:	20000258 	.word	0x20000258

08002130 <__malloc_unlock>:
 8002130:	4801      	ldr	r0, [pc, #4]	@ (8002138 <__malloc_unlock+0x8>)
 8002132:	f7ff bf0c 	b.w	8001f4e <__retarget_lock_release_recursive>
 8002136:	bf00      	nop
 8002138:	20000258 	.word	0x20000258

0800213c <__ssputs_r>:
 800213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002140:	461f      	mov	r7, r3
 8002142:	688e      	ldr	r6, [r1, #8]
 8002144:	4682      	mov	sl, r0
 8002146:	42be      	cmp	r6, r7
 8002148:	460c      	mov	r4, r1
 800214a:	4690      	mov	r8, r2
 800214c:	680b      	ldr	r3, [r1, #0]
 800214e:	d82d      	bhi.n	80021ac <__ssputs_r+0x70>
 8002150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002158:	d026      	beq.n	80021a8 <__ssputs_r+0x6c>
 800215a:	6965      	ldr	r5, [r4, #20]
 800215c:	6909      	ldr	r1, [r1, #16]
 800215e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002162:	eba3 0901 	sub.w	r9, r3, r1
 8002166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800216a:	1c7b      	adds	r3, r7, #1
 800216c:	444b      	add	r3, r9
 800216e:	106d      	asrs	r5, r5, #1
 8002170:	429d      	cmp	r5, r3
 8002172:	bf38      	it	cc
 8002174:	461d      	movcc	r5, r3
 8002176:	0553      	lsls	r3, r2, #21
 8002178:	d527      	bpl.n	80021ca <__ssputs_r+0x8e>
 800217a:	4629      	mov	r1, r5
 800217c:	f7ff ff52 	bl	8002024 <_malloc_r>
 8002180:	4606      	mov	r6, r0
 8002182:	b360      	cbz	r0, 80021de <__ssputs_r+0xa2>
 8002184:	464a      	mov	r2, r9
 8002186:	6921      	ldr	r1, [r4, #16]
 8002188:	f000 faf8 	bl	800277c <memcpy>
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002196:	81a3      	strh	r3, [r4, #12]
 8002198:	6126      	str	r6, [r4, #16]
 800219a:	444e      	add	r6, r9
 800219c:	6026      	str	r6, [r4, #0]
 800219e:	463e      	mov	r6, r7
 80021a0:	6165      	str	r5, [r4, #20]
 80021a2:	eba5 0509 	sub.w	r5, r5, r9
 80021a6:	60a5      	str	r5, [r4, #8]
 80021a8:	42be      	cmp	r6, r7
 80021aa:	d900      	bls.n	80021ae <__ssputs_r+0x72>
 80021ac:	463e      	mov	r6, r7
 80021ae:	4632      	mov	r2, r6
 80021b0:	4641      	mov	r1, r8
 80021b2:	6820      	ldr	r0, [r4, #0]
 80021b4:	f000 faaa 	bl	800270c <memmove>
 80021b8:	2000      	movs	r0, #0
 80021ba:	68a3      	ldr	r3, [r4, #8]
 80021bc:	1b9b      	subs	r3, r3, r6
 80021be:	60a3      	str	r3, [r4, #8]
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	4433      	add	r3, r6
 80021c4:	6023      	str	r3, [r4, #0]
 80021c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ca:	462a      	mov	r2, r5
 80021cc:	f000 fae4 	bl	8002798 <_realloc_r>
 80021d0:	4606      	mov	r6, r0
 80021d2:	2800      	cmp	r0, #0
 80021d4:	d1e0      	bne.n	8002198 <__ssputs_r+0x5c>
 80021d6:	4650      	mov	r0, sl
 80021d8:	6921      	ldr	r1, [r4, #16]
 80021da:	f7ff feb9 	bl	8001f50 <_free_r>
 80021de:	230c      	movs	r3, #12
 80021e0:	f8ca 3000 	str.w	r3, [sl]
 80021e4:	89a3      	ldrh	r3, [r4, #12]
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ee:	81a3      	strh	r3, [r4, #12]
 80021f0:	e7e9      	b.n	80021c6 <__ssputs_r+0x8a>
	...

080021f4 <_svfiprintf_r>:
 80021f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f8:	4698      	mov	r8, r3
 80021fa:	898b      	ldrh	r3, [r1, #12]
 80021fc:	4607      	mov	r7, r0
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	460d      	mov	r5, r1
 8002202:	4614      	mov	r4, r2
 8002204:	b09d      	sub	sp, #116	@ 0x74
 8002206:	d510      	bpl.n	800222a <_svfiprintf_r+0x36>
 8002208:	690b      	ldr	r3, [r1, #16]
 800220a:	b973      	cbnz	r3, 800222a <_svfiprintf_r+0x36>
 800220c:	2140      	movs	r1, #64	@ 0x40
 800220e:	f7ff ff09 	bl	8002024 <_malloc_r>
 8002212:	6028      	str	r0, [r5, #0]
 8002214:	6128      	str	r0, [r5, #16]
 8002216:	b930      	cbnz	r0, 8002226 <_svfiprintf_r+0x32>
 8002218:	230c      	movs	r3, #12
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	b01d      	add	sp, #116	@ 0x74
 8002222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002226:	2340      	movs	r3, #64	@ 0x40
 8002228:	616b      	str	r3, [r5, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	9309      	str	r3, [sp, #36]	@ 0x24
 800222e:	2320      	movs	r3, #32
 8002230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002234:	2330      	movs	r3, #48	@ 0x30
 8002236:	f04f 0901 	mov.w	r9, #1
 800223a:	f8cd 800c 	str.w	r8, [sp, #12]
 800223e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80023d8 <_svfiprintf_r+0x1e4>
 8002242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002246:	4623      	mov	r3, r4
 8002248:	469a      	mov	sl, r3
 800224a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800224e:	b10a      	cbz	r2, 8002254 <_svfiprintf_r+0x60>
 8002250:	2a25      	cmp	r2, #37	@ 0x25
 8002252:	d1f9      	bne.n	8002248 <_svfiprintf_r+0x54>
 8002254:	ebba 0b04 	subs.w	fp, sl, r4
 8002258:	d00b      	beq.n	8002272 <_svfiprintf_r+0x7e>
 800225a:	465b      	mov	r3, fp
 800225c:	4622      	mov	r2, r4
 800225e:	4629      	mov	r1, r5
 8002260:	4638      	mov	r0, r7
 8002262:	f7ff ff6b 	bl	800213c <__ssputs_r>
 8002266:	3001      	adds	r0, #1
 8002268:	f000 80a7 	beq.w	80023ba <_svfiprintf_r+0x1c6>
 800226c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800226e:	445a      	add	r2, fp
 8002270:	9209      	str	r2, [sp, #36]	@ 0x24
 8002272:	f89a 3000 	ldrb.w	r3, [sl]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 809f 	beq.w	80023ba <_svfiprintf_r+0x1c6>
 800227c:	2300      	movs	r3, #0
 800227e:	f04f 32ff 	mov.w	r2, #4294967295
 8002282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002286:	f10a 0a01 	add.w	sl, sl, #1
 800228a:	9304      	str	r3, [sp, #16]
 800228c:	9307      	str	r3, [sp, #28]
 800228e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002292:	931a      	str	r3, [sp, #104]	@ 0x68
 8002294:	4654      	mov	r4, sl
 8002296:	2205      	movs	r2, #5
 8002298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800229c:	484e      	ldr	r0, [pc, #312]	@ (80023d8 <_svfiprintf_r+0x1e4>)
 800229e:	f000 fa5f 	bl	8002760 <memchr>
 80022a2:	9a04      	ldr	r2, [sp, #16]
 80022a4:	b9d8      	cbnz	r0, 80022de <_svfiprintf_r+0xea>
 80022a6:	06d0      	lsls	r0, r2, #27
 80022a8:	bf44      	itt	mi
 80022aa:	2320      	movmi	r3, #32
 80022ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80022b0:	0711      	lsls	r1, r2, #28
 80022b2:	bf44      	itt	mi
 80022b4:	232b      	movmi	r3, #43	@ 0x2b
 80022b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80022ba:	f89a 3000 	ldrb.w	r3, [sl]
 80022be:	2b2a      	cmp	r3, #42	@ 0x2a
 80022c0:	d015      	beq.n	80022ee <_svfiprintf_r+0xfa>
 80022c2:	4654      	mov	r4, sl
 80022c4:	2000      	movs	r0, #0
 80022c6:	f04f 0c0a 	mov.w	ip, #10
 80022ca:	9a07      	ldr	r2, [sp, #28]
 80022cc:	4621      	mov	r1, r4
 80022ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022d2:	3b30      	subs	r3, #48	@ 0x30
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d94b      	bls.n	8002370 <_svfiprintf_r+0x17c>
 80022d8:	b1b0      	cbz	r0, 8002308 <_svfiprintf_r+0x114>
 80022da:	9207      	str	r2, [sp, #28]
 80022dc:	e014      	b.n	8002308 <_svfiprintf_r+0x114>
 80022de:	eba0 0308 	sub.w	r3, r0, r8
 80022e2:	fa09 f303 	lsl.w	r3, r9, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	46a2      	mov	sl, r4
 80022ea:	9304      	str	r3, [sp, #16]
 80022ec:	e7d2      	b.n	8002294 <_svfiprintf_r+0xa0>
 80022ee:	9b03      	ldr	r3, [sp, #12]
 80022f0:	1d19      	adds	r1, r3, #4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	9103      	str	r1, [sp, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfbb      	ittet	lt
 80022fa:	425b      	neglt	r3, r3
 80022fc:	f042 0202 	orrlt.w	r2, r2, #2
 8002300:	9307      	strge	r3, [sp, #28]
 8002302:	9307      	strlt	r3, [sp, #28]
 8002304:	bfb8      	it	lt
 8002306:	9204      	strlt	r2, [sp, #16]
 8002308:	7823      	ldrb	r3, [r4, #0]
 800230a:	2b2e      	cmp	r3, #46	@ 0x2e
 800230c:	d10a      	bne.n	8002324 <_svfiprintf_r+0x130>
 800230e:	7863      	ldrb	r3, [r4, #1]
 8002310:	2b2a      	cmp	r3, #42	@ 0x2a
 8002312:	d132      	bne.n	800237a <_svfiprintf_r+0x186>
 8002314:	9b03      	ldr	r3, [sp, #12]
 8002316:	3402      	adds	r4, #2
 8002318:	1d1a      	adds	r2, r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	9203      	str	r2, [sp, #12]
 800231e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002322:	9305      	str	r3, [sp, #20]
 8002324:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80023dc <_svfiprintf_r+0x1e8>
 8002328:	2203      	movs	r2, #3
 800232a:	4650      	mov	r0, sl
 800232c:	7821      	ldrb	r1, [r4, #0]
 800232e:	f000 fa17 	bl	8002760 <memchr>
 8002332:	b138      	cbz	r0, 8002344 <_svfiprintf_r+0x150>
 8002334:	2240      	movs	r2, #64	@ 0x40
 8002336:	9b04      	ldr	r3, [sp, #16]
 8002338:	eba0 000a 	sub.w	r0, r0, sl
 800233c:	4082      	lsls	r2, r0
 800233e:	4313      	orrs	r3, r2
 8002340:	3401      	adds	r4, #1
 8002342:	9304      	str	r3, [sp, #16]
 8002344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002348:	2206      	movs	r2, #6
 800234a:	4825      	ldr	r0, [pc, #148]	@ (80023e0 <_svfiprintf_r+0x1ec>)
 800234c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002350:	f000 fa06 	bl	8002760 <memchr>
 8002354:	2800      	cmp	r0, #0
 8002356:	d036      	beq.n	80023c6 <_svfiprintf_r+0x1d2>
 8002358:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <_svfiprintf_r+0x1f0>)
 800235a:	bb1b      	cbnz	r3, 80023a4 <_svfiprintf_r+0x1b0>
 800235c:	9b03      	ldr	r3, [sp, #12]
 800235e:	3307      	adds	r3, #7
 8002360:	f023 0307 	bic.w	r3, r3, #7
 8002364:	3308      	adds	r3, #8
 8002366:	9303      	str	r3, [sp, #12]
 8002368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800236a:	4433      	add	r3, r6
 800236c:	9309      	str	r3, [sp, #36]	@ 0x24
 800236e:	e76a      	b.n	8002246 <_svfiprintf_r+0x52>
 8002370:	460c      	mov	r4, r1
 8002372:	2001      	movs	r0, #1
 8002374:	fb0c 3202 	mla	r2, ip, r2, r3
 8002378:	e7a8      	b.n	80022cc <_svfiprintf_r+0xd8>
 800237a:	2300      	movs	r3, #0
 800237c:	f04f 0c0a 	mov.w	ip, #10
 8002380:	4619      	mov	r1, r3
 8002382:	3401      	adds	r4, #1
 8002384:	9305      	str	r3, [sp, #20]
 8002386:	4620      	mov	r0, r4
 8002388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800238c:	3a30      	subs	r2, #48	@ 0x30
 800238e:	2a09      	cmp	r2, #9
 8002390:	d903      	bls.n	800239a <_svfiprintf_r+0x1a6>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0c6      	beq.n	8002324 <_svfiprintf_r+0x130>
 8002396:	9105      	str	r1, [sp, #20]
 8002398:	e7c4      	b.n	8002324 <_svfiprintf_r+0x130>
 800239a:	4604      	mov	r4, r0
 800239c:	2301      	movs	r3, #1
 800239e:	fb0c 2101 	mla	r1, ip, r1, r2
 80023a2:	e7f0      	b.n	8002386 <_svfiprintf_r+0x192>
 80023a4:	ab03      	add	r3, sp, #12
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	462a      	mov	r2, r5
 80023aa:	4638      	mov	r0, r7
 80023ac:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <_svfiprintf_r+0x1f4>)
 80023ae:	a904      	add	r1, sp, #16
 80023b0:	f3af 8000 	nop.w
 80023b4:	1c42      	adds	r2, r0, #1
 80023b6:	4606      	mov	r6, r0
 80023b8:	d1d6      	bne.n	8002368 <_svfiprintf_r+0x174>
 80023ba:	89ab      	ldrh	r3, [r5, #12]
 80023bc:	065b      	lsls	r3, r3, #25
 80023be:	f53f af2d 	bmi.w	800221c <_svfiprintf_r+0x28>
 80023c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023c4:	e72c      	b.n	8002220 <_svfiprintf_r+0x2c>
 80023c6:	ab03      	add	r3, sp, #12
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	462a      	mov	r2, r5
 80023cc:	4638      	mov	r0, r7
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <_svfiprintf_r+0x1f4>)
 80023d0:	a904      	add	r1, sp, #16
 80023d2:	f000 f87d 	bl	80024d0 <_printf_i>
 80023d6:	e7ed      	b.n	80023b4 <_svfiprintf_r+0x1c0>
 80023d8:	0800287e 	.word	0x0800287e
 80023dc:	08002884 	.word	0x08002884
 80023e0:	08002888 	.word	0x08002888
 80023e4:	00000000 	.word	0x00000000
 80023e8:	0800213d 	.word	0x0800213d

080023ec <_printf_common>:
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f0:	4616      	mov	r6, r2
 80023f2:	4698      	mov	r8, r3
 80023f4:	688a      	ldr	r2, [r1, #8]
 80023f6:	690b      	ldr	r3, [r1, #16]
 80023f8:	4607      	mov	r7, r0
 80023fa:	4293      	cmp	r3, r2
 80023fc:	bfb8      	it	lt
 80023fe:	4613      	movlt	r3, r2
 8002400:	6033      	str	r3, [r6, #0]
 8002402:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002406:	460c      	mov	r4, r1
 8002408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800240c:	b10a      	cbz	r2, 8002412 <_printf_common+0x26>
 800240e:	3301      	adds	r3, #1
 8002410:	6033      	str	r3, [r6, #0]
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	0699      	lsls	r1, r3, #26
 8002416:	bf42      	ittt	mi
 8002418:	6833      	ldrmi	r3, [r6, #0]
 800241a:	3302      	addmi	r3, #2
 800241c:	6033      	strmi	r3, [r6, #0]
 800241e:	6825      	ldr	r5, [r4, #0]
 8002420:	f015 0506 	ands.w	r5, r5, #6
 8002424:	d106      	bne.n	8002434 <_printf_common+0x48>
 8002426:	f104 0a19 	add.w	sl, r4, #25
 800242a:	68e3      	ldr	r3, [r4, #12]
 800242c:	6832      	ldr	r2, [r6, #0]
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	42ab      	cmp	r3, r5
 8002432:	dc2b      	bgt.n	800248c <_printf_common+0xa0>
 8002434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002438:	6822      	ldr	r2, [r4, #0]
 800243a:	3b00      	subs	r3, #0
 800243c:	bf18      	it	ne
 800243e:	2301      	movne	r3, #1
 8002440:	0692      	lsls	r2, r2, #26
 8002442:	d430      	bmi.n	80024a6 <_printf_common+0xba>
 8002444:	4641      	mov	r1, r8
 8002446:	4638      	mov	r0, r7
 8002448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800244c:	47c8      	blx	r9
 800244e:	3001      	adds	r0, #1
 8002450:	d023      	beq.n	800249a <_printf_common+0xae>
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	6922      	ldr	r2, [r4, #16]
 8002456:	f003 0306 	and.w	r3, r3, #6
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf14      	ite	ne
 800245e:	2500      	movne	r5, #0
 8002460:	6833      	ldreq	r3, [r6, #0]
 8002462:	f04f 0600 	mov.w	r6, #0
 8002466:	bf08      	it	eq
 8002468:	68e5      	ldreq	r5, [r4, #12]
 800246a:	f104 041a 	add.w	r4, r4, #26
 800246e:	bf08      	it	eq
 8002470:	1aed      	subeq	r5, r5, r3
 8002472:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002476:	bf08      	it	eq
 8002478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800247c:	4293      	cmp	r3, r2
 800247e:	bfc4      	itt	gt
 8002480:	1a9b      	subgt	r3, r3, r2
 8002482:	18ed      	addgt	r5, r5, r3
 8002484:	42b5      	cmp	r5, r6
 8002486:	d11a      	bne.n	80024be <_printf_common+0xd2>
 8002488:	2000      	movs	r0, #0
 800248a:	e008      	b.n	800249e <_printf_common+0xb2>
 800248c:	2301      	movs	r3, #1
 800248e:	4652      	mov	r2, sl
 8002490:	4641      	mov	r1, r8
 8002492:	4638      	mov	r0, r7
 8002494:	47c8      	blx	r9
 8002496:	3001      	adds	r0, #1
 8002498:	d103      	bne.n	80024a2 <_printf_common+0xb6>
 800249a:	f04f 30ff 	mov.w	r0, #4294967295
 800249e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a2:	3501      	adds	r5, #1
 80024a4:	e7c1      	b.n	800242a <_printf_common+0x3e>
 80024a6:	2030      	movs	r0, #48	@ 0x30
 80024a8:	18e1      	adds	r1, r4, r3
 80024aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80024b4:	4422      	add	r2, r4
 80024b6:	3302      	adds	r3, #2
 80024b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80024bc:	e7c2      	b.n	8002444 <_printf_common+0x58>
 80024be:	2301      	movs	r3, #1
 80024c0:	4622      	mov	r2, r4
 80024c2:	4641      	mov	r1, r8
 80024c4:	4638      	mov	r0, r7
 80024c6:	47c8      	blx	r9
 80024c8:	3001      	adds	r0, #1
 80024ca:	d0e6      	beq.n	800249a <_printf_common+0xae>
 80024cc:	3601      	adds	r6, #1
 80024ce:	e7d9      	b.n	8002484 <_printf_common+0x98>

080024d0 <_printf_i>:
 80024d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d4:	7e0f      	ldrb	r7, [r1, #24]
 80024d6:	4691      	mov	r9, r2
 80024d8:	2f78      	cmp	r7, #120	@ 0x78
 80024da:	4680      	mov	r8, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	469a      	mov	sl, r3
 80024e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024e6:	d807      	bhi.n	80024f8 <_printf_i+0x28>
 80024e8:	2f62      	cmp	r7, #98	@ 0x62
 80024ea:	d80a      	bhi.n	8002502 <_printf_i+0x32>
 80024ec:	2f00      	cmp	r7, #0
 80024ee:	f000 80d1 	beq.w	8002694 <_printf_i+0x1c4>
 80024f2:	2f58      	cmp	r7, #88	@ 0x58
 80024f4:	f000 80b8 	beq.w	8002668 <_printf_i+0x198>
 80024f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002500:	e03a      	b.n	8002578 <_printf_i+0xa8>
 8002502:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002506:	2b15      	cmp	r3, #21
 8002508:	d8f6      	bhi.n	80024f8 <_printf_i+0x28>
 800250a:	a101      	add	r1, pc, #4	@ (adr r1, 8002510 <_printf_i+0x40>)
 800250c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002510:	08002569 	.word	0x08002569
 8002514:	0800257d 	.word	0x0800257d
 8002518:	080024f9 	.word	0x080024f9
 800251c:	080024f9 	.word	0x080024f9
 8002520:	080024f9 	.word	0x080024f9
 8002524:	080024f9 	.word	0x080024f9
 8002528:	0800257d 	.word	0x0800257d
 800252c:	080024f9 	.word	0x080024f9
 8002530:	080024f9 	.word	0x080024f9
 8002534:	080024f9 	.word	0x080024f9
 8002538:	080024f9 	.word	0x080024f9
 800253c:	0800267b 	.word	0x0800267b
 8002540:	080025a7 	.word	0x080025a7
 8002544:	08002635 	.word	0x08002635
 8002548:	080024f9 	.word	0x080024f9
 800254c:	080024f9 	.word	0x080024f9
 8002550:	0800269d 	.word	0x0800269d
 8002554:	080024f9 	.word	0x080024f9
 8002558:	080025a7 	.word	0x080025a7
 800255c:	080024f9 	.word	0x080024f9
 8002560:	080024f9 	.word	0x080024f9
 8002564:	0800263d 	.word	0x0800263d
 8002568:	6833      	ldr	r3, [r6, #0]
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6032      	str	r2, [r6, #0]
 8002570:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002574:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002578:	2301      	movs	r3, #1
 800257a:	e09c      	b.n	80026b6 <_printf_i+0x1e6>
 800257c:	6833      	ldr	r3, [r6, #0]
 800257e:	6820      	ldr	r0, [r4, #0]
 8002580:	1d19      	adds	r1, r3, #4
 8002582:	6031      	str	r1, [r6, #0]
 8002584:	0606      	lsls	r6, r0, #24
 8002586:	d501      	bpl.n	800258c <_printf_i+0xbc>
 8002588:	681d      	ldr	r5, [r3, #0]
 800258a:	e003      	b.n	8002594 <_printf_i+0xc4>
 800258c:	0645      	lsls	r5, r0, #25
 800258e:	d5fb      	bpl.n	8002588 <_printf_i+0xb8>
 8002590:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002594:	2d00      	cmp	r5, #0
 8002596:	da03      	bge.n	80025a0 <_printf_i+0xd0>
 8002598:	232d      	movs	r3, #45	@ 0x2d
 800259a:	426d      	negs	r5, r5
 800259c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025a0:	230a      	movs	r3, #10
 80025a2:	4858      	ldr	r0, [pc, #352]	@ (8002704 <_printf_i+0x234>)
 80025a4:	e011      	b.n	80025ca <_printf_i+0xfa>
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	0608      	lsls	r0, r1, #24
 80025ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80025b0:	d402      	bmi.n	80025b8 <_printf_i+0xe8>
 80025b2:	0649      	lsls	r1, r1, #25
 80025b4:	bf48      	it	mi
 80025b6:	b2ad      	uxthmi	r5, r5
 80025b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80025ba:	6033      	str	r3, [r6, #0]
 80025bc:	bf14      	ite	ne
 80025be:	230a      	movne	r3, #10
 80025c0:	2308      	moveq	r3, #8
 80025c2:	4850      	ldr	r0, [pc, #320]	@ (8002704 <_printf_i+0x234>)
 80025c4:	2100      	movs	r1, #0
 80025c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025ca:	6866      	ldr	r6, [r4, #4]
 80025cc:	2e00      	cmp	r6, #0
 80025ce:	60a6      	str	r6, [r4, #8]
 80025d0:	db05      	blt.n	80025de <_printf_i+0x10e>
 80025d2:	6821      	ldr	r1, [r4, #0]
 80025d4:	432e      	orrs	r6, r5
 80025d6:	f021 0104 	bic.w	r1, r1, #4
 80025da:	6021      	str	r1, [r4, #0]
 80025dc:	d04b      	beq.n	8002676 <_printf_i+0x1a6>
 80025de:	4616      	mov	r6, r2
 80025e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80025e4:	fb03 5711 	mls	r7, r3, r1, r5
 80025e8:	5dc7      	ldrb	r7, [r0, r7]
 80025ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025ee:	462f      	mov	r7, r5
 80025f0:	42bb      	cmp	r3, r7
 80025f2:	460d      	mov	r5, r1
 80025f4:	d9f4      	bls.n	80025e0 <_printf_i+0x110>
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d10b      	bne.n	8002612 <_printf_i+0x142>
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	07df      	lsls	r7, r3, #31
 80025fe:	d508      	bpl.n	8002612 <_printf_i+0x142>
 8002600:	6923      	ldr	r3, [r4, #16]
 8002602:	6861      	ldr	r1, [r4, #4]
 8002604:	4299      	cmp	r1, r3
 8002606:	bfde      	ittt	le
 8002608:	2330      	movle	r3, #48	@ 0x30
 800260a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800260e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002612:	1b92      	subs	r2, r2, r6
 8002614:	6122      	str	r2, [r4, #16]
 8002616:	464b      	mov	r3, r9
 8002618:	4621      	mov	r1, r4
 800261a:	4640      	mov	r0, r8
 800261c:	f8cd a000 	str.w	sl, [sp]
 8002620:	aa03      	add	r2, sp, #12
 8002622:	f7ff fee3 	bl	80023ec <_printf_common>
 8002626:	3001      	adds	r0, #1
 8002628:	d14a      	bne.n	80026c0 <_printf_i+0x1f0>
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	b004      	add	sp, #16
 8002630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f043 0320 	orr.w	r3, r3, #32
 800263a:	6023      	str	r3, [r4, #0]
 800263c:	2778      	movs	r7, #120	@ 0x78
 800263e:	4832      	ldr	r0, [pc, #200]	@ (8002708 <_printf_i+0x238>)
 8002640:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	6831      	ldr	r1, [r6, #0]
 8002648:	061f      	lsls	r7, r3, #24
 800264a:	f851 5b04 	ldr.w	r5, [r1], #4
 800264e:	d402      	bmi.n	8002656 <_printf_i+0x186>
 8002650:	065f      	lsls	r7, r3, #25
 8002652:	bf48      	it	mi
 8002654:	b2ad      	uxthmi	r5, r5
 8002656:	6031      	str	r1, [r6, #0]
 8002658:	07d9      	lsls	r1, r3, #31
 800265a:	bf44      	itt	mi
 800265c:	f043 0320 	orrmi.w	r3, r3, #32
 8002660:	6023      	strmi	r3, [r4, #0]
 8002662:	b11d      	cbz	r5, 800266c <_printf_i+0x19c>
 8002664:	2310      	movs	r3, #16
 8002666:	e7ad      	b.n	80025c4 <_printf_i+0xf4>
 8002668:	4826      	ldr	r0, [pc, #152]	@ (8002704 <_printf_i+0x234>)
 800266a:	e7e9      	b.n	8002640 <_printf_i+0x170>
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	6023      	str	r3, [r4, #0]
 8002674:	e7f6      	b.n	8002664 <_printf_i+0x194>
 8002676:	4616      	mov	r6, r2
 8002678:	e7bd      	b.n	80025f6 <_printf_i+0x126>
 800267a:	6833      	ldr	r3, [r6, #0]
 800267c:	6825      	ldr	r5, [r4, #0]
 800267e:	1d18      	adds	r0, r3, #4
 8002680:	6961      	ldr	r1, [r4, #20]
 8002682:	6030      	str	r0, [r6, #0]
 8002684:	062e      	lsls	r6, r5, #24
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	d501      	bpl.n	800268e <_printf_i+0x1be>
 800268a:	6019      	str	r1, [r3, #0]
 800268c:	e002      	b.n	8002694 <_printf_i+0x1c4>
 800268e:	0668      	lsls	r0, r5, #25
 8002690:	d5fb      	bpl.n	800268a <_printf_i+0x1ba>
 8002692:	8019      	strh	r1, [r3, #0]
 8002694:	2300      	movs	r3, #0
 8002696:	4616      	mov	r6, r2
 8002698:	6123      	str	r3, [r4, #16]
 800269a:	e7bc      	b.n	8002616 <_printf_i+0x146>
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	2100      	movs	r1, #0
 80026a0:	1d1a      	adds	r2, r3, #4
 80026a2:	6032      	str	r2, [r6, #0]
 80026a4:	681e      	ldr	r6, [r3, #0]
 80026a6:	6862      	ldr	r2, [r4, #4]
 80026a8:	4630      	mov	r0, r6
 80026aa:	f000 f859 	bl	8002760 <memchr>
 80026ae:	b108      	cbz	r0, 80026b4 <_printf_i+0x1e4>
 80026b0:	1b80      	subs	r0, r0, r6
 80026b2:	6060      	str	r0, [r4, #4]
 80026b4:	6863      	ldr	r3, [r4, #4]
 80026b6:	6123      	str	r3, [r4, #16]
 80026b8:	2300      	movs	r3, #0
 80026ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026be:	e7aa      	b.n	8002616 <_printf_i+0x146>
 80026c0:	4632      	mov	r2, r6
 80026c2:	4649      	mov	r1, r9
 80026c4:	4640      	mov	r0, r8
 80026c6:	6923      	ldr	r3, [r4, #16]
 80026c8:	47d0      	blx	sl
 80026ca:	3001      	adds	r0, #1
 80026cc:	d0ad      	beq.n	800262a <_printf_i+0x15a>
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	079b      	lsls	r3, r3, #30
 80026d2:	d413      	bmi.n	80026fc <_printf_i+0x22c>
 80026d4:	68e0      	ldr	r0, [r4, #12]
 80026d6:	9b03      	ldr	r3, [sp, #12]
 80026d8:	4298      	cmp	r0, r3
 80026da:	bfb8      	it	lt
 80026dc:	4618      	movlt	r0, r3
 80026de:	e7a6      	b.n	800262e <_printf_i+0x15e>
 80026e0:	2301      	movs	r3, #1
 80026e2:	4632      	mov	r2, r6
 80026e4:	4649      	mov	r1, r9
 80026e6:	4640      	mov	r0, r8
 80026e8:	47d0      	blx	sl
 80026ea:	3001      	adds	r0, #1
 80026ec:	d09d      	beq.n	800262a <_printf_i+0x15a>
 80026ee:	3501      	adds	r5, #1
 80026f0:	68e3      	ldr	r3, [r4, #12]
 80026f2:	9903      	ldr	r1, [sp, #12]
 80026f4:	1a5b      	subs	r3, r3, r1
 80026f6:	42ab      	cmp	r3, r5
 80026f8:	dcf2      	bgt.n	80026e0 <_printf_i+0x210>
 80026fa:	e7eb      	b.n	80026d4 <_printf_i+0x204>
 80026fc:	2500      	movs	r5, #0
 80026fe:	f104 0619 	add.w	r6, r4, #25
 8002702:	e7f5      	b.n	80026f0 <_printf_i+0x220>
 8002704:	0800288f 	.word	0x0800288f
 8002708:	080028a0 	.word	0x080028a0

0800270c <memmove>:
 800270c:	4288      	cmp	r0, r1
 800270e:	b510      	push	{r4, lr}
 8002710:	eb01 0402 	add.w	r4, r1, r2
 8002714:	d902      	bls.n	800271c <memmove+0x10>
 8002716:	4284      	cmp	r4, r0
 8002718:	4623      	mov	r3, r4
 800271a:	d807      	bhi.n	800272c <memmove+0x20>
 800271c:	1e43      	subs	r3, r0, #1
 800271e:	42a1      	cmp	r1, r4
 8002720:	d008      	beq.n	8002734 <memmove+0x28>
 8002722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800272a:	e7f8      	b.n	800271e <memmove+0x12>
 800272c:	4601      	mov	r1, r0
 800272e:	4402      	add	r2, r0
 8002730:	428a      	cmp	r2, r1
 8002732:	d100      	bne.n	8002736 <memmove+0x2a>
 8002734:	bd10      	pop	{r4, pc}
 8002736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800273a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800273e:	e7f7      	b.n	8002730 <memmove+0x24>

08002740 <_sbrk_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	2300      	movs	r3, #0
 8002744:	4d05      	ldr	r5, [pc, #20]	@ (800275c <_sbrk_r+0x1c>)
 8002746:	4604      	mov	r4, r0
 8002748:	4608      	mov	r0, r1
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	f7fd ff46 	bl	80005dc <_sbrk>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_sbrk_r+0x1a>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	b103      	cbz	r3, 800275a <_sbrk_r+0x1a>
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	20000254 	.word	0x20000254

08002760 <memchr>:
 8002760:	4603      	mov	r3, r0
 8002762:	b510      	push	{r4, lr}
 8002764:	b2c9      	uxtb	r1, r1
 8002766:	4402      	add	r2, r0
 8002768:	4293      	cmp	r3, r2
 800276a:	4618      	mov	r0, r3
 800276c:	d101      	bne.n	8002772 <memchr+0x12>
 800276e:	2000      	movs	r0, #0
 8002770:	e003      	b.n	800277a <memchr+0x1a>
 8002772:	7804      	ldrb	r4, [r0, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	428c      	cmp	r4, r1
 8002778:	d1f6      	bne.n	8002768 <memchr+0x8>
 800277a:	bd10      	pop	{r4, pc}

0800277c <memcpy>:
 800277c:	440a      	add	r2, r1
 800277e:	4291      	cmp	r1, r2
 8002780:	f100 33ff 	add.w	r3, r0, #4294967295
 8002784:	d100      	bne.n	8002788 <memcpy+0xc>
 8002786:	4770      	bx	lr
 8002788:	b510      	push	{r4, lr}
 800278a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800278e:	4291      	cmp	r1, r2
 8002790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002794:	d1f9      	bne.n	800278a <memcpy+0xe>
 8002796:	bd10      	pop	{r4, pc}

08002798 <_realloc_r>:
 8002798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800279c:	4607      	mov	r7, r0
 800279e:	4614      	mov	r4, r2
 80027a0:	460d      	mov	r5, r1
 80027a2:	b921      	cbnz	r1, 80027ae <_realloc_r+0x16>
 80027a4:	4611      	mov	r1, r2
 80027a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027aa:	f7ff bc3b 	b.w	8002024 <_malloc_r>
 80027ae:	b92a      	cbnz	r2, 80027bc <_realloc_r+0x24>
 80027b0:	f7ff fbce 	bl	8001f50 <_free_r>
 80027b4:	4625      	mov	r5, r4
 80027b6:	4628      	mov	r0, r5
 80027b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027bc:	f000 f81a 	bl	80027f4 <_malloc_usable_size_r>
 80027c0:	4284      	cmp	r4, r0
 80027c2:	4606      	mov	r6, r0
 80027c4:	d802      	bhi.n	80027cc <_realloc_r+0x34>
 80027c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80027ca:	d8f4      	bhi.n	80027b6 <_realloc_r+0x1e>
 80027cc:	4621      	mov	r1, r4
 80027ce:	4638      	mov	r0, r7
 80027d0:	f7ff fc28 	bl	8002024 <_malloc_r>
 80027d4:	4680      	mov	r8, r0
 80027d6:	b908      	cbnz	r0, 80027dc <_realloc_r+0x44>
 80027d8:	4645      	mov	r5, r8
 80027da:	e7ec      	b.n	80027b6 <_realloc_r+0x1e>
 80027dc:	42b4      	cmp	r4, r6
 80027de:	4622      	mov	r2, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	bf28      	it	cs
 80027e4:	4632      	movcs	r2, r6
 80027e6:	f7ff ffc9 	bl	800277c <memcpy>
 80027ea:	4629      	mov	r1, r5
 80027ec:	4638      	mov	r0, r7
 80027ee:	f7ff fbaf 	bl	8001f50 <_free_r>
 80027f2:	e7f1      	b.n	80027d8 <_realloc_r+0x40>

080027f4 <_malloc_usable_size_r>:
 80027f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027f8:	1f18      	subs	r0, r3, #4
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	bfbc      	itt	lt
 80027fe:	580b      	ldrlt	r3, [r1, r0]
 8002800:	18c0      	addlt	r0, r0, r3
 8002802:	4770      	bx	lr

08002804 <_init>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	bf00      	nop
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr

08002810 <_fini>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr
